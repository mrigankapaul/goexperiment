// SYNTAX REFERENCE

// TODO
Recover from panic pending

// Basic Primitive Types

package main

import "fmt"

const (
	first  = iota
	second = iota
)

const (
	third = iota
	fourth
)

func main() {

	// Value Types
	// var i int
	// i = 42
	// fmt.Println(i)

	// var f float32 = 3.14
	// fmt.Println(f)

	// firstName := "Mriganka"
	// fmt.Println(firstName)

	// b := true
	// fmt.Println(b)

	// c := complex(3, 4)
	// fmt.Println(c)

	// r, j := real(c), imag(c)
	// fmt.Println(r)
	// fmt.Println(j)

	// Pointer data type // No Pointer Arithmetic is supported.
	// var firstName *string = new(string)
	// *firstName = "Mriganka"
	// fmt.Println(*firstName)

	// firstName := "Mriganka"
	// fmt.Println(firstName)

	// ptr := &firstName
	// fmt.Println(ptr, *ptr)

	// firstName = "Sriparna"
	// fmt.Println(ptr, *ptr)

	// const pi = 3.1415
	// fmt.Println(pi)

	// const c = 3
	// fmt.Println(c + 3)
	// fmt.Println(c + 1.2)

	// const c int = 3
	// fmt.Println(c + 3)
	// // fmt.Println(c + 1.2) // wont work
	// fmt.Println(float32(c) + 1.3)

	fmt.Println(first, second, third, fourth)
}


// Arrays and Slices
package main

import "fmt"

func main() {

	// Arrays
	var arr [3]int
	arr[0] = 0
	arr[1] = 1
	arr[2] = 2

	fmt.Println(arr)
	fmt.Println(arr[1])

	array := [3]int{0, 1, 2}
	fmt.Println(array)
	fmt.Println(array[2])

	// Slices
	array2 := [3]int{0, 1, 2}
	slice := array2[:]
	array2[1] = 42
	slice[2] = 27
	fmt.Println(array2, slice)

	slice2 := []int{0, 1, 2}
	fmt.Println(slice2)

	slice2 = append(slice2, 3, 4, 5)
	fmt.Println(slice2)

	slice3 := slice2[1:]
	slice4 := slice2[:2]
	slice5 := slice2[1:2]
	fmt.Println(slice2, "    ", slice3)
	fmt.Println(slice2, "    ", slice4)
	fmt.Println(slice2, "    ", slice5)

}

// Maps

package main

import "fmt"

func main() {
	m := map[string]int{"foo": 42}
	fmt.Println(m)
	fmt.Println(m["foo"])
	m["foo"] = 27
	fmt.Println(m)

	delete(m, "foo")
	fmt.Println(m)
}

// functions
func main() {
	fmt.Println("Hello World")
	startWebServer(8888) // calling a function
	a := startWebServer  // function as variable
	port, isStarted := a(9999)
	fmt.Println(port, isStarted)
}

func startWebServer(port int) (int, error) {
	fmt.Println("Starting server...")
	fmt.Println("Server started...", port)
	return port, nil
}

func main() {
	fmt.Println("Hello World")
	startWebServer(8888) // calling a function
	a := startWebServer  // function as variable
	_, isStarted := a(9999) //write only variable _
	fmt.Println(isStarted)
}

// for loop
func main() {
	var i int
	for i < 5 {
		println(i)
		i++
		if i == 3 {
			continue
		}
		println("continuing")
	}
}


func main() {
	for i := 0; i < 5; i++ {
		println(i)
	}
}

func main() {
	var i int
	for {
		println(i)
		i++
	}
}


// for loops with collections
func main() {

	slice := []int{1, 2, 3}
	for i, v := range slice {
		println(i, v)
	}

	wellKnownPorts := map[string]int{"http": 80, "https": 443}
	for key, v := range wellKnownPorts {
		println(key, v)
	}

	wellKnownPortsExample := map[string]int{"http": 80, "https": 443}
	for key1 := range wellKnownPortsExample {
		println(key1)
	}

	wellKnownPortsExample2 := map[string]int{"http": 80, "https": 443}
	for _, value := range wellKnownPortsExample2 {
		println(value)
	}

}

// panic 
func main() {
	println("Starting web server")
	panic("Something bad happened")
}

// if else if and else block
	if u1.ID != u2.ID {
		println("Not Same User")
	} else if u1.FirstName == u2.FirstName {
		println("Similar User")
	} else {
		println("Same User")
	}


// switch case
func main() {
	r := HTTPRequest{Method: "GET"}

	switch r.Method {
	case "GET":
		println("Get request")
		fallthrough
	case "POST":
		println("Post request")
	default:
		println("Default")
	}
}
